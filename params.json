{
  "name": "electangular.js",
  "tagline": "AngularJS Module for Atom Electron",
  "body": "Use __electangular.js__ in your __[Electron](http://electron.atom.io/)__ apps to easily access Electron based functionality in your __[AngularJS](https://angularjs.org/)__ code.\r\n\r\nSome additional service methods for IPC functionality are incorporated, as well as `Promise` based `dialog` module methods.\r\n\r\n### Installation\r\n\r\n__1. Download and move the `electangular.js` file into your Electron project.__\r\n\r\n__2. Load the script in the main Electron `index.html` after your Angular import.__\r\n\r\n```html\r\n<html>\r\n  ...\r\n\r\n  <script src='./js/angular.min.js'></script>\r\n  <script src='./js/electangular.js'></script> <!-- you are here -->\r\n  <script src='./my_ng_app.js'></script>\r\n  </body>\r\n</html>\r\n```\r\n\r\n__3. Inject the module into your Angular `app` code.__\r\n\r\n```js\r\n'use strict';\r\nangular.module('app', ['electangular']); // welcome to the team\r\n\r\n...\r\n```\r\n\r\n### Services\r\n\r\nThe __electangular__ module exposes two public services that can be used in your Angular project.\r\n\r\n|Name|Description|\r\n|----|-----------|\r\n|`electron`|A collection of Electron functionality for access within AngularJS.|\r\n|`ipc`|Facilitates IPC communication between the `main` process and `renderer` process.|\r\n\r\n---\r\n\r\n#### `electron` Service\r\n\r\nAn example of using the `electron` service in an Angular controller:\r\n\r\n```js\r\n'use strict';\r\nangular.module('app', ['electangular']) // don't forget electangular\r\n\r\n.controller(\"MainController\", ['$scope','electron',\r\nfunction($scope, electron) {\r\n  $scope.doBeep = function() {\r\n    electron.shell.beep();\r\n  }\r\n\r\n  $scope.showError = function(err) {\r\n    electron.dialog.showErrorBox('Error Title', err);\r\n  }\r\n}]);\r\n```\r\n\r\nIn the code above, when the `doBeep` method is triggered, Electron will make the machine perform a system beep. When `showErrorBox` is called, a dialog box will be presented to the user.\r\n\r\n#### API\r\n\r\nThe supported Electron modules can be found in the `electron` service namespace. Refer to the [Electron documentation](http://electron.atom.io/docs/) for more details on the functionality each module provides.\r\n\r\nBecause AngularJS runs in the `renderer` process, access to the `main` process is provided via `electron.remote` and all rules for that module apply. ([See `remote` docs.](http://electron.atom.io/docs/api/remote/))\r\n\r\n##### Electron Module Table\r\n\r\n|Module|Process|\r\n|-----|-------|\r\n|`Accelerator`|Main|\r\n|`app`|Main|\r\n|`autoUpdater`|Main|\r\n|`BrowserWindow`|Main|\r\n|`contentTracing`|Main|\r\n|`dialog`|Main|\r\n|`globalShortcut`|Main|\r\n|`Menu`|Main|\r\n|`MenuItem`|Main|\r\n|`powerMonitor`|Main|\r\n|`powerSaveBlocker`|Main|\r\n|`protocol`|Main|\r\n|`session`|Main|\r\n|`systemPreferences`|Main|\r\n|`Tray`|Main|\r\n|`desktopCapturer`|Renderer|\r\n|`webFrame`|Renderer|\r\n|`clipboard`|Both|\r\n|`crashReporter`|Both|\r\n|`nativeImage`|Both|\r\n|`process`|Both|\r\n|`screen`|Both|\r\n|`shell`|Both|\r\n\r\n---\r\n\r\n#### `dialog` Module Promises\r\n\r\nSome Electron methods, like `dialog.showMessageBox`, use a callback. For Angular, we wrap the `$q` service to handle this properly using promises. This requires a slightly different signature for the `dialog` methods.\r\n\r\n```js\r\n...\r\n\r\n.controller(\"MainController\", ['$scope', 'electron',\r\nfunction($scope, electron) {\r\n  $scope.showMessage = function() {\r\n    electron.dialog.showMessageBox({\r\n      title: 'Title',\r\n      description: 'This is some descriptive message',\r\n      buttons: ['Cancel', 'OK'],\r\n      cancelId: 0,\r\n      defaultId: 1\r\n    }).then((result) => { //Promise, not callback.\r\n      console.log(result);\r\n    }, () => {\r\n      console.log('error');\r\n    });\r\n  }\r\n}]);\r\n```\r\n\r\nThe `dialog` methods use the same signature as shown in the Electron docs, except for the callback. Instead the following methods return a `Promise` when using __electangular__.\r\n\r\n  - `showOpenDialog`\r\n  - `showSaveDialog`\r\n  - `showMessageBox`\r\n\r\nReplacing callbacks with Promises is fairly simple:\r\n\r\n```js\r\n//Do not include a callback\r\ndialog.showSaveDialog({ //Set up as usual\r\n  title: 'Save Me',\r\n  defaultPath: 'home',\r\n  buttonLabel: 'OK'\r\n}).then((result) => { //Op was successful\r\n  console.log(result); //The save file path\r\n}, () => { //Something went wrong\r\n  console.log('oh no!');\r\n});\r\n```\r\n\r\n> __Note:__ `dialog.showErrorBox` does not use a callback or `Promise`.\r\n\r\n```js\r\n...\r\n\r\n.controller(\"MainController\", ['electron',\r\nfunction(electron) {\r\n  electron.dialog.showErrorBox(\"Error Title\", \"Error Description\");\r\n}]);\r\n```\r\n\r\n__Window Target__\r\n\r\nMost of the `dialog` methods allow you to optionally pass a `browserWindow` instance where the dialog should be rendered. For example, the signature for `showMessageBox`:\r\n\r\n```js\r\ndialog.showMessageBox([browserWindow,] options [,callback]);\r\n```\r\n\r\nIf you do not specifically pass a window reference, then the currently focused window will render the dialog.\r\n\r\nOn OS X you can also use \"sheets\" by passing a `null` type to the `browserWindow` parameter:\r\n\r\n```js\r\n//Dialog will show as OS X sheet (Promise shown)\r\ndialog.showMessageBox(null, options).then((result) => {\r\n  console.log(result);\r\n}, () => {\r\n  console.log('error');\r\n});\r\n```\r\n\r\n---\r\n\r\n#### `ipc` Service\r\n\r\nYou can \"wire\" in your Angular app with the IPC (inter-process communication) system that Electron exposes using the __electangular__ `icp` service.\r\n\r\nAn example of using the `ipc` service in an Angular controller:\r\n\r\n```js\r\n...\r\n\r\n.controller(\"MainController\", ['ipc',\r\nfunction(ipc) {\r\n  //send a message to main process\r\n  ipc.send(\"Here is a message to main\");\r\n}])\r\n```\r\n\r\n#### Setting Up Electron\r\n\r\n__1. Add the following to the top of your `main.js`:__\r\n\r\n```js\r\n...\r\nconst {ipcMain} = require('electron').ipcMain;\r\n\r\n...\r\n```\r\n\r\n__2. Add the following listener to the `main.js` apps 'ready' event code:__\r\n\r\n```js\r\n...\r\n\r\napp.on('ready', () => {\r\n  ...\r\n\r\n  ipcMain.on('electron-msg', (event, msg) => {\r\n    //handle incoming message here\r\n    console.log(msg);\r\n\r\n    //message can be an Object\r\n    if (msg.username == 'dude') {\r\n      console.log(msg.access_level);\r\n    }\r\n  });\r\n})\r\n```\r\n\r\n__3. Send a message from the `main` process to the `renderer`:__\r\n\r\n```js\r\n...\r\n\r\napp.on('ready', () => {\r\n  ...\r\n\r\n  win = new BrowserWindow(...)\r\n  //send message\r\n  win.webContents.send('electron-msg', msg);\r\n})\r\n```\r\n\r\n---\r\n\r\n#### Setting Up Angular\r\n\r\nWhen the __electangular__ module is first initialized it will broadcast incoming messages from the `main` process. You can listen for these messages, which use the Angular `$rootScope` event emitter.\r\n\r\nAn example of listening to the `main` process in a controller:\r\n\r\n```js\r\n'use strict';\r\nangular.module('app', ['electangular'])\r\n\r\n.controller(\"MainController\", ['$rootScope',\r\nfunction($rootScope) {\r\n  $rootScope.$on('electron-msg', (event, msg) => {\r\n    console.log(msg);\r\n  });\r\n}]);\r\n```\r\n\r\nIf you prefer to handle the messaging at a central point, you can add the listener to the `run` method of your Angular app:\r\n\r\n```js\r\n'use strict';\r\nangular.module('app', ['electangular'])\r\n\r\n.run(['$rootScope',\r\nfunction($rootScope) {\r\n  $rootScope.$on('electron-msg', (event, msg) => {\r\n    switch (msg) { //Traffic cop\r\n      case 'msg1':\r\n        //do something\r\n        break;\r\n      case 'msg2':\r\n        //something else\r\n        break;\r\n      default:\r\n        //whatever\r\n      }\r\n    }\r\n  }\r\n}]);\r\n```\r\n\r\n---\r\n\r\n&copy;2016 develephant :elephant:\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}